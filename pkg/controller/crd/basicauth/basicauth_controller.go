package basicauth

import (
	"context"
	"time"

	"github.com/go-logr/logr"
	"golang.org/x/crypto/bcrypt"
	v1 "k8s.io/api/core/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/runtime"

	"sigs.k8s.io/controller-runtime/pkg/client"
	"sigs.k8s.io/controller-runtime/pkg/controller"
	"sigs.k8s.io/controller-runtime/pkg/handler"
	logf "sigs.k8s.io/controller-runtime/pkg/log"
	"sigs.k8s.io/controller-runtime/pkg/manager"
	"sigs.k8s.io/controller-runtime/pkg/reconcile"
	"sigs.k8s.io/controller-runtime/pkg/source"

	"github.com/mittwald/kubernetes-secret-generator/pkg/apis/types/v1alpha1"
	"github.com/mittwald/kubernetes-secret-generator/pkg/controller/crd"
	"github.com/mittwald/kubernetes-secret-generator/pkg/controller/secret"
)

var log = logf.Log.WithName("controller_basicauth_secret")
var reqLogger logr.Logger

const Kind = "BasicAuth"

// Add creates a new BasicAuth Controller and adds it to the Manager. The Manager will set fields on the Controller
// and Start it when the Manager is Started.
func Add(mgr manager.Manager) error {
	return add(mgr, NewReconciler(mgr))
}

// NewReconciler returns a new reconcile.Reconciler
func NewReconciler(mgr manager.Manager) reconcile.Reconciler {
	return &ReconcileBasicAuth{client: mgr.GetClient(), scheme: mgr.GetScheme()}
}

type ReconcileBasicAuth struct {
	// This Client, initialized using mgr.Client() above, is a split Client
	// that reads objects from the cache and writes to the apiserver
	client client.Client
	scheme *runtime.Scheme
}

// add adds a new Controller to mgr with r as the reconcile.Reconciler
func add(mgr manager.Manager, r reconcile.Reconciler) error {
	// Create a new controller
	c, err := controller.New("basicauth-controller", mgr, controller.Options{Reconciler: r})
	if err != nil {
		return err
	}

	// Watch for changes to primary resource BasicAuth
	err = c.Watch(&source.Kind{Type: &v1alpha1.BasicAuth{}}, &handler.EnqueueRequestForObject{}, crd.IgnoreStatusUpdatePredicate())
	if err != nil {
		return err
	}

	return nil
}

// Reconcile reads that state of the cluster for a BasicAuth object and makes changes based on the state read
// and what is in the Secret.Spec
// Note:
// The Controller will requeue the Request to be processed again if the returned error is non-nil or
// Result.Requeue is true, otherwise upon completion it will remove the work from the queue.
func (r *ReconcileBasicAuth) Reconcile(request reconcile.Request) (reconcile.Result, error) {
	reqLogger = log.WithValues("Request.Namespace", request.Namespace, "Request.Name", request.Name)
	reqLogger.Info("Reconciling BasicAuth")
	ctx := context.Background()

	// fetch the BasicAuth instance
	instance := &v1alpha1.BasicAuth{}
	err := r.client.Get(ctx, request.NamespacedName, instance)
	if err != nil {
		// if instance is not found don't requeue and don't return error, else requeue and return error
		return crd.CheckError(err)
	}

	// attempt to fetch secret object described by this BasicAuth
	existing := &v1.Secret{}
	err = r.client.Get(ctx, request.NamespacedName, existing)
	if errors.IsNotFound(err) {
		// secret not found, create new one
		return r.createNewSecret(ctx, instance, reqLogger)
	}
	// check for other errors
	if err != nil {
		return reconcile.Result{}, err
	}
	// secret already exists, update if necessary
	return r.updateSecret(ctx, instance, existing, reqLogger)
}

// updateSecret attempts to update an existing Secret object with new values. Secret will only be updated,
// if it is owned by a BasicAuth cr.
func (r *ReconcileBasicAuth) updateSecret(ctx context.Context, instance *v1alpha1.BasicAuth, existing *v1.Secret, reqLogger logr.Logger) (reconcile.Result, error) {
	existingOwnerRefs := existing.OwnerReferences

	// check if secret owned by a BasicAuth cr, otherwise don't update
	ownedByCR := false
	for _, ref := range existingOwnerRefs {
		if ref.Kind != Kind {
			continue
		} else {
			ownedByCR = true
			break
		}
	}
	if !ownedByCR {
		// secret is not owned by a BasicAuth cr, do nothing
		reqLogger.Info("secret not generated by correct cr kind, skipping", "correctKind", Kind)
		return reconcile.Result{}, nil
	}

	username := instance.Spec.Username
	// fallback in case username is empty
	if username == "" {
		username = "admin"
	}

	length := instance.Spec.Length
	encoding := instance.Spec.Encoding
	regenerate := instance.Spec.ForceRegenerate
	data := instance.Spec.Data

	existingAuth := existing.Data[secret.SecretFieldBasicAuthIngress]

	targetSecret := existing.DeepCopy()

	c := crd.Client{Client: r.client}

	if len(existingAuth) > 0 && !regenerate {
		// auth is set and regeneration is not forced, only update new data fields
		updateData(data, targetSecret, regenerate)

		return c.ClientUpdateSecret(ctx, targetSecret, instance, r.scheme)
	}

	// either auth is not set or regeneration is forced, create new values
	password, passwordHash, err := generateBasicAuthValues(length, encoding)
	if err != nil {
		return reconcile.Result{RequeueAfter: time.Second * 30}, err
	}

	updateData(data, targetSecret, regenerate)

	targetSecret.Data[secret.SecretFieldBasicAuthIngress] = append([]byte(username+":"), passwordHash...)
	targetSecret.Data[secret.SecretFieldBasicAuthUsername] = []byte(username)
	targetSecret.Data[secret.SecretFieldBasicAuthPassword] = password

	return c.ClientUpdateSecret(ctx, targetSecret, instance, r.scheme)
}

// createNewSecret creates a new basic auth secret from the provided values. The Secret's owner will be set
// as the BasicAuth that is being reconciled and a reference to the Secret will be stored in the cr's status.
func (r *ReconcileBasicAuth) createNewSecret(ctx context.Context, instance *v1alpha1.BasicAuth, reqLogger logr.Logger) (reconcile.Result, error) {
	username := instance.Spec.Username
	// fallback in case username is empty
	if username == "" {
		username = "admin"
	}

	length := instance.Spec.Length
	encoding := instance.Spec.Encoding
	data := instance.Spec.Data

	values := make(map[string][]byte)

	for key := range data {
		values[key] = []byte(data[key])
	}

	password, passwordHash, innerErr := generateBasicAuthValues(length, encoding)
	if innerErr != nil {
		return reconcile.Result{RequeueAfter: time.Second * 30}, innerErr
	}

	values[secret.SecretFieldBasicAuthIngress] = append([]byte(username+":"), passwordHash...)
	values[secret.SecretFieldBasicAuthUsername] = []byte(username)
	values[secret.SecretFieldBasicAuthPassword] = password

	c := crd.Client{Client: r.client}

	return c.ClientCreateSecret(ctx, values, instance, r.scheme)
}

// generateBasicAuthValues returns a newly generated password and its hash with given length and encoding.
func generateBasicAuthValues(length, encoding string) ([]byte, []byte, error) {
	secretLength, isByteLength, err := crd.ParseByteLength(secret.SecretLength(), length)
	if err != nil {
		reqLogger.Error(err, "could not parse length for new random string")
		return []byte{}, []byte{}, err
	}

	var password []byte
	password, err = secret.GenerateRandomString(secretLength, encoding, isByteLength)
	if err != nil {
		reqLogger.Error(err, "could not generate random string")

		return []byte{}, []byte{}, err
	}

	var passwordHash []byte
	passwordHash, err = bcrypt.GenerateFromPassword(password, bcrypt.DefaultCost)
	if err != nil {
		reqLogger.Error(err, "could not hash random string")

		return []byte{}, []byte{}, err
	}

	return password, passwordHash, nil
}

// updateData updates the given Secret's data property. If regenerate is false,
// only new keys will be added, existing keys will not be modified.
func updateData(data map[string]string, targetSecret *v1.Secret, regenerate bool) {
	for key := range data {
		if string(targetSecret.Data[key]) == "" || regenerate {
			targetSecret.Data[key] = []byte(data[key])
		}
	}
}
